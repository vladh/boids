module.exports = {
  fragmentShader: "//--------------------------------------------------------------------------------------------------**\n  // VARIABLES TO TWEAK\n\n  //Material settings:\n  vec3 ambientColor = vec3(0.06,0.15,0.2);  // Set the ambient color (R,G,B)\n  float specIntensity = 1.0;          // Set Specular intensity (default value = 1.0)\n  float shininess = 10.0;           // Set shininess of the specular (between 1.0 and 10.0 is suggested)\n  float maximumMix = 0.5;           // Set the maximum blending between far and near materials (default value = 1.0, between 0.0 and 1.0)\n  float matNear = 0.02;           // distance where the far materiat start to appear (between 0.0 and 1.0)\n  float matFar = 0.4;             // distance where the far material has replaced the near material (between 0.0 and 1.0)\n\n  //Lighting settings:\n  vec3 sunColor = vec3(1.0,0.8,0.6);      // Set the Sun color (R,G,B)\n  float sunIntensity = 1.5;         // Set the Sun intensity (at least 0.0)\n  vec3 sunDirection = vec3(-1.0,0.0,0.4);   // Set the sun direction (X,Y,Z)\n\n  //Fog settings:\n  float maxDist = 200.0;            // Set the maximum ditance of view (blender units, look at the camera clipping)\n  float midDist = 0.2;            // Set the intermediate fog distance, in percentage of the max. distance (between 0.0 and 1.0)\n  vec3 fogColor2 = vec3(1.0,1.0,1.0);     // Set the ending fog color (R,G,B)\n  vec3 fogColor = vec3(0.5,0.6,0.8);      // Set the intermediate fog color (R,G,B)\n\n  // UV Coord.\n  float tile = 512.0;             // Set the number of times the texture is repeated (near the player)\n  float tileFar = 128.0;            // Set the number of times the texture is repeated (far from the player)\n\n  // Texture\n  float margin = 0.6;             // Set the margin around textures, for the multilayer file\n\n  //---------------------------------------------------------------------------------------------------**\n\n  // get textures\n  uniform sampler2D heightMap;\n  uniform sampler2D multilayer;\n  uniform sampler2D stencil;\n  uniform sampler2D lightmap;\n\n  //get vertex position\n  varying vec4 v_position;\n  varying vec2 oUv;\n\n  // prepare the tiled UVcoord for tiled multilayer\n  float marginAdd = (0.25-margin*0.25)/2.0;\n  vec2 TileUv = vec2 ((((oUv.s*tile)-float(int(oUv.s*tile)))/4.0)*margin+marginAdd,\n            (((oUv.t*tile)-float(int(oUv.t*tile)))/4.0)*margin+marginAdd);\n\n  vec2 TileUvFar = vec2 ((((oUv.s*tileFar)-float(int(oUv.s*tileFar)))/4.0)*margin+marginAdd,\n            (((oUv.t*tileFar)-float(int(oUv.t*tileFar)))/4.0)*margin+marginAdd);\n\n  vec3 tex3(float posX, float posY){\n      vec3 textureMap3 = texture2D(multilayer, vec2(TileUv.x+posX,TileUv.y+posY)).rgb;\n    return textureMap3;\n  }\n\n  vec3 tex3Far(float posX, float posY){\n      vec3 textureMap3Far = texture2D(multilayer, vec2(TileUvFar.x+posX,TileUvFar.y+posY)).rgb;\n    return textureMap3Far;\n  }\n\n  vec3 prepareNM(vec3 exemple){\n      vec3 gut = vec3(2.0, 2.0, 1.0) * exemple - vec3(1.0, 1.0, 1.0);\n    return gut;\n  }\n\n  void main() {\n    // get the view vector\n    vec3 viewDirection = -normalize(vec3(v_position)); \n\n    // get normals\n    vec3 normalGlobal = normalize(vec3(2.0, 2.0, 1.0) * (texture2D(heightMap, oUv.st).rgb) - vec3(1.0, 1.0, 0.0));\n\n    // separate textures from multilayer file\n\n    //material 1\n    vec3 diffuseColor_mat1 = tex3(0.0,0.75);\n    float specLevel_mat1 = tex3(0.0,0.5).x;\n    vec3 normalDetails_mat1 = prepareNM(tex3(0.0,0.25));\n    vec3 diffuseColorFar_mat1 = tex3Far(0.0,0.75);\n    vec3 normalDetailsFar_mat1 = prepareNM(tex3Far(0.0,0.25));\n\n    //material 2\n    vec3 diffuseColor_mat2 = tex3(0.25,0.75);\n    float specLevel_mat2 = tex3(0.25,0.5).x;\n    vec3 normalDetails_mat2 = prepareNM(tex3(0.25,0.25));\n    vec3 diffuseColorFar_mat2 = tex3Far(0.25,0.75);\n    vec3 normalDetailsFar_mat2 = prepareNM(tex3Far(0.25,0.25));\n\n    //material 3\n    vec3 diffuseColor_mat3 =  tex3(0.5,0.75);\n    float specLevel_mat3 = tex3(0.5,0.5).x;\n    vec3 normalDetails_mat3 = prepareNM(tex3(0.5,0.25));\n    vec3 diffuseColorFar_mat3 =tex3Far(0.5,0.75);\n    vec3 normalDetailsFar_mat3 = prepareNM(tex3Far(0.5,0.25));\n\n    //Material 4\n    vec3 diffuseColor_mat4 = tex3(0.75,0.75);\n    float specLevel_mat4 = tex3(0.75,0.5).x;\n    vec3 normalDetails_mat4 = prepareNM(tex3(0.75,0.25));\n    vec3 diffuseColorFar_mat4 = tex3Far(0.75,0.75);\n    vec3 normalDetailsFar_mat4 =  prepareNM(tex3Far(0.75,0.25));\n\n    // Stencils maps\n    float stencil_mat2 = texture2D(stencil, oUv.st).b;\n    float stencil_mat3 = texture2D(stencil, oUv.st).r;\n    float stencil_mat4 = texture2D(stencil, oUv.st).g;\n\n    //lightmap\n    float lightmap = texture2D(lightmap, oUv.st).r;\n\n    //Near Material\n    vec3 normalAllDetails = mix(mix(mix(normalDetails_mat1,normalDetails_mat2,stencil_mat2),normalDetails_mat3,stencil_mat3),normalDetails_mat4,stencil_mat4);\n    float specLevelAll = mix(mix(mix(specLevel_mat1ecLevel_mat2,stencil_mat2)ecLevel_mat3,stencil_mat3)ecLevel_mat4,stencil_mat4);\n    vec3 normalFinal = normalize(normalGlobal+normalAllDetails);\n    vec3 diffuseRawAll = ambientColor+lightmap*sunColor*(sunIntensity*max(0.0,dot(normalFinal, normalize(sunDirection)))); // compute diffuse lighting\n    vec3 diffuseColorAll = mix(mix(mix(diffuseColor_mat1,diffuseColor_mat2,stencil_mat2),diffuseColor_mat3,stencil_mat3),diffuseColor_mat4,stencil_mat4);\n    float specularAll = specIntensity*lightmap*max(0.0,(0.8*pow(dot(reflect(sunDirection, normalFinal), viewDirection), shininess)));// compute specular reflection\n    vec3 materialAll = diffuseRawAll*diffuseColorAll+specularAll*specLevelAll;\n\n    //Far Material\n    vec3 normalDetailsFar = mix(mix(mix(normalDetailsFar_mat1,normalDetailsFar_mat2,stencil_mat2),normalDetailsFar_mat3,stencil_mat3),normalDetailsFar_mat4,stencil_mat4);\n    vec3 normalFinalFar = normalize(normalGlobal+normalDetailsFar);\n    vec3 diffuseRawFar = ambientColor+lightmap*sunColor*(sunIntensity*max(0.0,dot(normalFinalFar, normalize(sunDirection)))); // compute diffuse lighting\n    vec3 diffuseColorFar = mix(mix(mix(diffuseColorFar_mat1,diffuseColorFar_mat2,stencil_mat2),diffuseColorFar_mat3,stencil_mat3),diffuseColorFar_mat4,stencil_mat4);\n    vec3 materialFar = diffuseRawFar*diffuseColorFar;\n\n    // getting fog distances\n    float z = clamp((gl_FragCoord.z / gl_FragCoord.w / maxDist),0.0,1.0); // compute intermediate fog\n    float zNear = clamp((1.0-(z/midDist)),0.0,1.0);\n    float zFar = clamp((1.0-(z/(1.0-midDist)-midDist)),0.0,1.0);\n    float zMat = clamp((1.0-(z/matNear-matFar)),0.0,maximumMix);\n\n    // Mix near and far materials\n    vec3 material = mix(materialFar,materialAll,zMat);\n\n    // add fog\n    vec3 beauty = mix(fogColor2,(mix(fogColor,material,zNear)),zFar);\n\n    // set final values\n    gl_FragColor.rgb = beauty;\n    gl_FragColor.a = 1.0;\n  }",
  vertexShader: "varying vec2 oUv;\nvarying vec2 debugUv;\nvarying vec4 v_position;\n\nuniform sampler2D heightMap;\nuniform int uvX;\nuniform int uvY;\nuniform float height;\nuniform int cellNumber;\n\nvoid main () {\n  vec4 v = vec4(position, 1.0);\n  oUv.x = uv.x+float(uvX)/float(cellNumber);\n  oUv.y = uv.y+float(uvY)/float(cellNumber);\n  v.y += texture2D( heightMap, clamp(oUv.st, 0.0, 1.0)).a * (0.03*height);\n  gl_Position = projectionMatrix * modelViewMatrix * v;\n  v_position = gl_Position;\n}"
};
